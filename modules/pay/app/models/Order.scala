/*#
  * @file Order.scala
  * @begin 8-Apr-2015
  * @author <a href="mailto:giuseppe.greco@gokillo.com">Giuseppe Greco</a>
  * @copyright 2015 <a href="http://gokillo.com">Gokillo</a>
  */

package models.pay

import org.joda.time.DateTime
import play.api.libs.json._
import utils.common.Formats._
import models.common.{JsEntity, RefId, Status}
import models.common.RefId._
import models.common.Status._
import models.auth.IdentityMode._
import Coin._
import OrderType._

/**
  * Represents an order for receiving or sending coins.
  *
  * @constructor  Initializes a new instance of the [[Order]] class.
  * @param json   The order data as JSON.
  */
class Order protected(protected var json: JsValue) extends JsEntity with api.Order {

  def parentId = json as (__ \ 'parentId).readNullable[String]
  def parentId_= (v: Option[String]) = setValue((__ \ 'parentId), Json.toJson(v))
  def peerId = json as (__ \ 'peerId).readNullable[String]
  def peerId_= (v: Option[String]) = setValue((__ \ 'peerId), Json.toJson(v))
  def accountId = json as (__ \ 'accountId).readNullable[String]
  def accountId_= (v: Option[String]) = setValue((__ \ 'accountId), Json.toJson(v))
  def refId = json as (__ \ 'refId).readNullable[RefId]
  def refId_= (v: Option[RefId]) = setValue((__ \ 'refId), Json.toJson(v))
  def orderType = json as (__ \ 'type).readNullable[OrderType]
  def orderType_= (v: Option[OrderType]) = setValue((__ \ 'type), Json.toJson(v))
  def issuerIdentityMode = json as (__ \ 'issuerIdentityMode).readNullable[IdentityMode]
  def issuerIdentityMode_= (v: Option[IdentityMode]) = setValue((__ \ 'issuerIdentityMode), Json.toJson(v))
  def coinAddress = json as (__ \ 'coinAddress).readNullable[String]
  def coinAddress_= (v: Option[String]) = setValue((__ \ 'coinAddress), Json.toJson(v))
  def amount = json as (__ \ 'amount).readNullable[Coin]
  def amount_= (v: Option[Coin]) = setValue((__ \ 'amount), Json.toJson(v))
  def status = json as (__ \ 'status).readNullable[Status]
  def status_= (v: Option[Status]) = setValue((__ \ 'status), Json.toJson(v))

  def copy(order: Order): Order = new Order(this.json.as[JsObject] ++ order.json.as[JsObject])
  def copy(json: JsValue) = throw new UnsupportedOperationException
}

/**
  * Factory class for creating [[Order]] instances.
  */
object Order {

  import play.api.libs.functional.syntax._
  import play.api.libs.json.Reads._

  /**
    * Initializes a new instance of the [[Order]] class with the specified values.
    *
    * @param id           The identifier of the order.
    * @param parentId     The identifier of the parent order.
    * @param peerId       The identifier of a possible order generated by an external
    *                     system this order is associated with.
    * @param accountId    The identifier of the account that receives or sends amount.
    * @param refId        A reference to the object associated with the order.
    * @param orderType    One of the [[OrderType]] values.
    * @param issuerIdentityMode One of the [[models.auth.IdentityMode]] values.
    * @param coinAddress  The receiving or sending coin address.
    * @param amount       The amount of the order.
    * @param status       One of the [[OrderStatus]] values.
    * @param creationTime The time the order was created.
    * @return             A new instance of the [[Order]] class.
    */
  def apply(
    id: Option[String] = None,
    parentId: Option[String] = None,
    peerId: Option[String] = None,
    accountId: Option[String] = None,
    refId: Option[RefId] = None,
    orderType: Option[OrderType] = None,
    issuerIdentityMode: Option[IdentityMode] = None,
    coinAddress: Option[String] = None,
    amount: Option[Coin] = None,
    status: Option[Status] = None,
    creationTime: Option[DateTime] = None
  ): Order = new Order(
    orderWrites.writes(
      id,
      parentId,
      peerId,
      accountId,
      refId,
      orderType,
      issuerIdentityMode,
      coinAddress,
      amount,
      status,
      creationTime
    )
  )

  /**
    * Extracts the content of the specified [[Order]].
    *
    * @param order  The [[Order]] to extract the content from.
    * @return       An `Option` that contains the extracted data,
    *               or `None` if `order` is `null`.
    */
  def unapply(order: Order) = {
    if (order eq null) None
    else Some((
      order.id,
      order.parentId,
      order.peerId,
      order.accountId,
      order.refId,
      order.orderType,
      order.issuerIdentityMode,
      order.coinAddress,
      order.amount,
      order.status,
      order.creationTime
    ))
  }

  /**
    * Serializes/Deserializes an [[Order]] to/from JSON.
    */
  implicit val orderFormat = new Format[Order] {
    def reads(json: JsValue) = JsSuccess(new Order(json))
    def writes(order: Order) = order.json
  }

  /**
    * Serializes an [[Order]] to JSON.
    * @note Used internally by `apply`.
    */
  private val orderWrites = (
    (__ \ 'id).writeNullable[String] ~
    (__ \ 'parentId).writeNullable[String] ~
    (__ \ 'peerId).writeNullable[String] ~
    (__ \ 'accountId).writeNullable[String] ~
    (__ \ 'refId).writeNullable[RefId] ~
    (__ \ 'type).writeNullable[OrderType] ~
    (__ \ 'issuerIdentityMode).writeNullable[IdentityMode] ~
    (__ \ 'coinAddress).writeNullable[String] ~
    (__ \ 'amount).writeNullable[Coin] ~
    (__ \ 'status).writeNullable[Status] ~
    (__ \ 'creationTime).writeNullable[DateTime]
  ).tupled
}
